{
  "address": "0x0ba082cd80998Bdd49A4B47ce7C6F03489727b06",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6db1ac57e8cdca76d5d2bd00bc9232056b925ed7509a20aea28936764d5acea3",
  "receipt": {
    "to": null,
    "from": "0x6E3A76980ff269E7BFed4dE532D4F03e0768b2DC",
    "contractAddress": "0x0ba082cd80998Bdd49A4B47ce7C6F03489727b06",
    "transactionIndex": 1,
    "gasUsed": "4306106",
    "logsBloom": "0x
    "blockHash": "0x9910e24b6c8bef48bc13ff214c2f9668954f7b35e6798f262538060b4c732db4",
    "transactionHash": "0x6db1ac57e8cdca76d5d2bd00bc9232056b925ed7509a20aea28936764d5acea3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30286541,
        "transactionHash": "0x6db1ac57e8cdca76d5d2bd00bc9232056b925ed7509a20aea28936764d5acea3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006e3a76980ff269e7bfed4de532d4f03e0768b2dc",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000016f29225be26000000000000000000000000000000000000000000000000017c8dd3d98c6baa9b000000000000000000000000000000000000000000000bff3ee312d9af676ba00000000000000000000000000000000000000000000000017c76e14766ad849b000000000000000000000000000000000000000000000bff3efa056bd52591a0",
        "logIndex": 3,
        "blockHash": "0x9910e24b6c8bef48bc13ff214c2f9668954f7b35e6798f262538060b4c732db4"
      }
    ],
    "blockNumber": 30286541,
    "cumulativeGasUsed": "4478159",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6E3A76980ff269E7BFed4dE532D4F03e0768b2DC"
  ],
  "numDeployments": 1,
  "solcInputHash": "6211d7f74c5719950da37b06d8cff0b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"./interfaces/IUniswapV2ERC20.sol\\\";\\n\\n//solhint-disable var-name-mixedcase\\n//solhint-disable reason-string\\n//solhint-disable const-name-snakecase\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    string public constant override name = \\\"Uniswap V2\\\";\\n    string public constant override symbol = \\\"UNI-V2\\\";\\n    uint8 public constant override decimals = 18;\\n    uint256 public override totalSupply;\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public override nonces;\\n\\n    constructor() {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        //solhint-disable-next-line not-rely-on-time\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"UniswapV2: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x071fa2ebdb2e29a4acba08bdbbfd62b9492104203411478cbcdba668011ac0d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./UniswapV2Pair.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    bytes32 public constant PAIR_HASH =\\n        keccak256(type(UniswapV2Pair).creationCode);\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    constructor(address _feeToSetter) {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        override\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1] == address(0),\\n            \\\"UniswapV2: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n\\n        pair = address(\\n            new UniswapV2Pair{\\n                salt: keccak256(abi.encodePacked(token0, token1))\\n            }()\\n        );\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0xb5056dad9f9cc1539db889344d2f4164344db015cd6f96c8540f2c5998970f48\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./UniswapV2ERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\n//solhint-disable func-name-mixedcase\\n//solhint-disable avoid-low-level-calls\\n//solhint-disable reason-string\\n//solhint-disable not-rely-on-time\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant override MINIMUM_LIQUIDITY = 10**3;\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public override price0CumulativeLast;\\n    uint256 public override price1CumulativeLast;\\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"UniswapV2: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(\\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\\n            \\\"UniswapV2: OVERFLOW\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        unchecked {\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n            if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n                // * never overflows, and + overflow is desired\\n                price0CumulativeLast +=\\n                    uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                    timeElapsed;\\n                price1CumulativeLast +=\\n                    uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                    timeElapsed;\\n            }\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n        private\\n        returns (bool feeOn)\\n    {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0) * _reserve1);\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply * (rootK - rootKLast);\\n                    uint256 denominator = rootK * 5 + rootKLast;\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to)\\n        external\\n        override\\n        lock\\n        returns (uint256 liquidity)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                (amount0 * _totalSupply) / _reserve0,\\n                (amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to)\\n        external\\n        override\\n        lock\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external override lock {\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0)\\n                IUniswapV2Callee(to).uniswapV2Call(\\n                    msg.sender,\\n                    amount0Out,\\n                    amount1Out,\\n                    data\\n                );\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\\n            ? balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\\n            ? balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\\n            require(\\n                balance0Adjusted * balance1Adjusted >=\\n                    uint256(_reserve0) * _reserve1 * 1e6,\\n                \\\"UniswapV2: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20(_token0).balanceOf(address(this)) - reserve0\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20(_token1).balanceOf(address(this)) - reserve1\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external override lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe3f1d2d0d53ca0d6d3a53474d4296d29448218c9886f874d53e924e3eb3d3c38\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a6d346befeb5fa4c270119146d2c7cf36883faef13d9efcdb3199648b80ca55\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd911cf29e88741492a550eac3b869608f2d26e2c1a9a7949a07c5894eb9fe194\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4e52276ec68e030a886905cfcb76d77faaf9a726521b66f251cd7a1c6e56c799\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x13e7c1f1ba838bf2b0c9fa10ca11ad0a580afe97b8cc0bbb055920c2c8c6efb2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xdccbd4782f20ffdafd2c29be7399e019180dcb09bbdc3893b4bfc8583022d256\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.8.4;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2b36e4dfa216d9cde5ccb3254142309bfc1d4a62b5a3c451285425328feeee5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.8.4;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    //solhint-disable-next-line state-visibility\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x003ff88c3660e2eb3087a920b3893806df406681293522ef4c8f2f6268b2b6fe\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162004dd138038062004dd183398181016040528101906100349190610090565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610102565b60008151905061008a816100eb565b92915050565b6000602082840312156100a257600080fd5b60006100b08482850161007b565b91505092915050565b60006100c4826100cb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f4816100b9565b81146100ff57600080fd5b50565b614cbf80620001126000396000f3fe60806040523480156200001157600080fd5b5060043610620000a05760003560e01c806364f91c72116200006f57806364f91c721462000141578063a2e74af61462000163578063c9c653961462000183578063e6a4390514620001b9578063f46901ed14620001ef57620000a0565b8063017e7e5814620000a5578063094b741514620000c75780631e3dd18b14620000e9578063574f2ba3146200011f575b600080fd5b620000af6200020f565b604051620000be919062000c0c565b60405180910390f35b620000d162000233565b604051620000e0919062000c0c565b60405180910390f35b62000107600480360381019062000101919062000ac6565b62000259565b60405162000116919062000c0c565b60405180910390f35b6200012962000299565b60405162000138919062000d28565b60405180910390f35b6200014b620002a6565b6040516200015a919062000c83565b60405180910390f35b6200018160048036038101906200017b919062000a59565b620002d6565b005b620001a160048036038101906200019b919062000a85565b620003ad565b604051620001b0919062000c0c565b60405180910390f35b620001d76004803603810190620001d1919062000a85565b62000905565b604051620001e6919062000c0c565b60405180910390f35b6200020d600480360381019062000207919062000a59565b62000947565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381815481106200026a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600380549050905090565b60405180602001620002b89062000a1d565b6020820181038252601f19601f820116604052508051906020012081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003609062000cc2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000421576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004189062000ca0565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106200046057838562000463565b84845b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004d19062000d06565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620005e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005df9062000ce4565b60405180910390fd5b8181604051602001620005fd92919062000bdc565b60405160208183030381529060405280519060200120604051620006219062000a1d565b8190604051809103906000f590508015801562000642573d6000803e3d6000fd5b5092508273ffffffffffffffffffffffffffffffffffffffff1663485cc95583836040518363ffffffff1660e01b81526004016200068292919062000c29565b600060405180830381600087803b1580156200069d57600080fd5b505af1158015620006b2573d6000803e3d6000fd5b5050505082600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e985600380549050604051620008f592919062000c56565b60405180910390a3505092915050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009d19062000cc2565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613dde8062000eac83390190565b60008135905062000a3c8162000e77565b92915050565b60008135905062000a538162000e91565b92915050565b60006020828403121562000a6c57600080fd5b600062000a7c8482850162000a2b565b91505092915050565b6000806040838503121562000a9957600080fd5b600062000aa98582860162000a2b565b925050602062000abc8582860162000a2b565b9150509250929050565b60006020828403121562000ad957600080fd5b600062000ae98482850162000a42565b91505092915050565b62000afd8162000d56565b82525050565b62000b1862000b128262000d56565b62000d9e565b82525050565b62000b298162000d6a565b82525050565b600062000b3e601e8362000d45565b915062000b4b8262000dd3565b602082019050919050565b600062000b6560148362000d45565b915062000b728262000dfc565b602082019050919050565b600062000b8c60168362000d45565b915062000b998262000e25565b602082019050919050565b600062000bb360178362000d45565b915062000bc08262000e4e565b602082019050919050565b62000bd68162000d94565b82525050565b600062000bea828562000b03565b60148201915062000bfc828462000b03565b6014820191508190509392505050565b600060208201905062000c23600083018462000af2565b92915050565b600060408201905062000c40600083018562000af2565b62000c4f602083018462000af2565b9392505050565b600060408201905062000c6d600083018562000af2565b62000c7c602083018462000bcb565b9392505050565b600060208201905062000c9a600083018462000b1e565b92915050565b6000602082019050818103600083015262000cbb8162000b2f565b9050919050565b6000602082019050818103600083015262000cdd8162000b56565b9050919050565b6000602082019050818103600083015262000cff8162000b7d565b9050919050565b6000602082019050818103600083015262000d218162000ba4565b9050919050565b600060208201905062000d3f600083018462000bcb565b92915050565b600082825260208201905092915050565b600062000d638262000d74565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000dab8262000db2565b9050919050565b600062000dbf8262000dc6565b9050919050565b60008160601b9050919050565b7f556e697377617056323a204944454e544943414c5f4144445245535345530000600082015250565b7f556e697377617056323a20464f5242494444454e000000000000000000000000600082015250565b7f556e697377617056323a20504149525f45584953545300000000000000000000600082015250565b7f556e697377617056323a205a45524f5f41444452455353000000000000000000600082015250565b62000e828162000d56565b811462000e8e57600080fd5b50565b62000e9c8162000d94565b811462000ea857600080fd5b5056fe60806040526001600c553480156200001657600080fd5b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600a81526020017f556e697377617020563200000000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001204630604051602001620000ca95949392919062000160565b6040516020818303038152906040528051906020012060038190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000205565b6200013881620001bd565b82525050565b6200014981620001d1565b82525050565b6200015a81620001fb565b82525050565b600060a0820190506200017760008301886200013e565b6200018660208301876200013e565b6200019560408301866200013e565b620001a460608301856200014f565b620001b360808301846200012d565b9695505050505050565b6000620001ca82620001db565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b613bc980620002156000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146104db578063d505accf146104f9578063dd62ed3e14610515578063fff6cae914610545576101a9565b8063ba9a7a5614610483578063bc25cf77146104a1578063c45a0155146104bd576101a9565b80637ecebe00116100d35780637ecebe00146103d457806389afcb441461040457806395d89b4114610435578063a9059cbb14610453576101a9565b80636a6278421461035657806370a08231146103865780637464fc3d146103b6576101a9565b806323b872dd116101665780633644e515116101405780633644e515146102e0578063485cc955146102fe5780635909c0d51461031a5780635a3d549314610338576101a9565b806323b872dd1461027457806330adf81f146102a4578063313ce567146102c2576101a9565b8063022c0d9f146101ae57806306fdde03146101ca5780630902f1ac146101e8578063095ea7b3146102085780630dfe16811461023857806318160ddd14610256575b600080fd5b6101c860048036038101906101c39190612c51565b61054f565b005b6101d2610b80565b6040516101df919061318e565b60405180910390f35b6101f0610bb9565b6040516101ff93929190613379565b60405180910390f35b610222600480360381019061021d9190612bc3565b610c16565b60405161022f91906130b2565b60405180910390f35b610240610c2d565b60405161024d9190613020565b60405180910390f35b61025e610c53565b60405161026b91906133b0565b60405180910390f35b61028e60048036038101906102899190612ad6565b610c59565b60405161029b91906130b2565b60405180910390f35b6102ac610da8565b6040516102b991906130cd565b60405180910390f35b6102ca610dcf565b6040516102d79190613439565b60405180910390f35b6102e8610dd4565b6040516102f591906130cd565b60405180910390f35b61031860048036038101906103139190612a9a565b610dda565b005b610322610ef0565b60405161032f91906133b0565b60405180910390f35b610340610ef6565b60405161034d91906133b0565b60405180910390f35b610370600480360381019061036b9190612a48565b610efc565b60405161037d91906133b0565b60405180910390f35b6103a0600480360381019061039b9190612a48565b6112d3565b6040516103ad91906133b0565b60405180910390f35b6103be6112eb565b6040516103cb91906133b0565b60405180910390f35b6103ee60048036038101906103e99190612a48565b6112f1565b6040516103fb91906133b0565b60405180910390f35b61041e60048036038101906104199190612a48565b611309565b60405161042c9291906133cb565b60405180910390f35b61043d6117da565b60405161044a919061318e565b60405180910390f35b61046d60048036038101906104689190612bc3565b611813565b60405161047a91906130b2565b60405180910390f35b61048b61182a565b60405161049891906133b0565b60405180910390f35b6104bb60048036038101906104b69190612a48565b611830565b005b6104c5611a6c565b6040516104d29190613020565b60405180910390f35b6104e3611a92565b6040516104f09190613020565b60405180910390f35b610513600480360381019061050e9190612b25565b611ab8565b005b61052f600480360381019061052a9190612a9a565b611ce0565b60405161053c91906133b0565b60405180910390f35b61054d611d05565b005b6001600c5414610594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058b90613270565b60405180910390fd5b6000600c8190555060008511806105ab5750600084115b6105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906131b0565b60405180910390fd5b6000806105f5610bb9565b5091509150816dffffffffffffffffffffffffffff16871080156106285750806dffffffffffffffffffffffffffff1686105b610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90613230565b60405180910390fd5b6000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415801561072057508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b61075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906131f0565b60405180910390fd5b60008b111561077457610773828a8d611ef4565b5b60008a111561078957610788818a8c611ef4565b5b6000888890501115610809578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b81526004016107d6959493929190613064565b600060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108429190613020565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612c28565b93508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108cd9190613020565b60206040518083038186803b1580156108e557600080fd5b505afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190612c28565b92505050600089856dffffffffffffffffffffffffffff1661093f919061360a565b831161094c576000610974565b89856dffffffffffffffffffffffffffff16610968919061360a565b83610973919061360a565b5b9050600089856dffffffffffffffffffffffffffff16610994919061360a565b83116109a15760006109c9565b89856dffffffffffffffffffffffffffff166109bd919061360a565b836109c8919061360a565b5b905060008211806109da5750600081115b610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a10906131d0565b60405180910390fd5b6000600383610a2891906135b0565b6103e886610a3691906135b0565b610a40919061360a565b90506000600383610a5191906135b0565b6103e886610a5f91906135b0565b610a69919061360a565b9050620f4240876dffffffffffffffffffffffffffff16896dffffffffffffffffffffffffffff16610a9b91906135b0565b610aa591906135b0565b8183610ab191906135b0565b1015610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae990613290565b60405180910390fd5b5050610b0084848888612049565b8873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848f8f604051610b6394939291906133f4565b60405180910390a35050505050506001600c819055505050505050565b6040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b6000806000600860009054906101000a90046dffffffffffffffffffffffffffff1692506008600e9054906101000a90046dffffffffffffffffffffffffffff1691506008601c9054906101000a900463ffffffff169050909192565b6000610c23338484612310565b6001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610d925781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8a919061360a565b925050819055505b610d9d8484846123fb565b600190509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e61906132f0565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60095481565b600a5481565b60006001600c5414610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90613270565b60405180910390fd5b6000600c81905550600080610f56610bb9565b50915091506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fb89190613020565b60206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190612c28565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110679190613020565b60206040518083038186803b15801561107f57600080fd5b505afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b79190612c28565b90506000846dffffffffffffffffffffffffffff16836110d7919061360a565b90506000846dffffffffffffffffffffffffffff16836110f7919061360a565b905060006111058787612511565b9050600080549050600081141561114b576103e861112d848661112891906135b0565b6126ce565b611137919061360a565b985061114660006103e8612748565b6111a4565b6111a1886dffffffffffffffffffffffffffff16828661116b91906135b0565b6111759190613529565b886dffffffffffffffffffffffffffff16838661119291906135b0565b61119c9190613529565b612820565b98505b600089116111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de906132d0565b60405180910390fd5b6111f18a8a612748565b6111fd86868a8a612049565b811561126e576008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1661126791906135b0565b600b819055505b3373ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f85856040516112b69291906133cb565b60405180910390a250505050505050506001600c81905550919050565b60016020528060005260406000206000915090505481565b600b5481565b60046020528060005260406000206000915090505481565b6000806001600c5414611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890613270565b60405180910390fd5b6000600c81905550600080611364610bb9565b50915091506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113f29190613020565b60206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190612c28565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161147f9190613020565b60206040518083038186803b15801561149757600080fd5b505afa1580156114ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cf9190612c28565b90506000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006115218888612511565b905060008054905080858461153691906135b0565b6115409190613529565b9a5080848461154f91906135b0565b6115599190613529565b995060008b11801561156b575060008a115b6115aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a1906132b0565b60405180910390fd5b6115b43084612839565b6115bf878d8d611ef4565b6115ca868d8c611ef4565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116039190613020565b60206040518083038186803b15801561161b57600080fd5b505afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116539190612c28565b94508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161168e9190613020565b60206040518083038186803b1580156116a657600080fd5b505afa1580156116ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116de9190612c28565b93506116ec85858b8b612049565b811561175d576008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1661175691906135b0565b600b819055505b8b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d6040516117bc9291906133cb565b60405180910390a35050505050505050506001600c81905550915091565b6040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b60006118203384846123fb565b6001905092915050565b6103e881565b6001600c5414611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c90613270565b60405180910390fd5b6000600c819055506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506119958284600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119369190613020565b60206040518083038186803b15801561194e57600080fd5b505afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119869190612c28565b611990919061360a565b611ef4565b611a5f81846008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a009190613020565b60206040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190612c28565b611a5a919061360a565b611ef4565b50506001600c8190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b42841015611afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af290613250565b60405180910390fd5b60006003547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b898989600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611b7790613731565b919050558a604051602001611b91969594939291906130e8565b60405160208183030381529060405280519060200120604051602001611bb8929190612fe9565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051611bf59493929190613149565b6020604051602081039080840390855afa158015611c17573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611c8b57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190613210565b60405180910390fd5b611cd5898989612310565b505050505050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b6001600c5414611d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4190613270565b60405180910390fd5b6000600c81905550611eea600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611db09190613020565b60206040518083038186803b158015611dc857600080fd5b505afa158015611ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e009190612c28565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e5b9190613020565b60206040518083038186803b158015611e7357600080fd5b505afa158015611e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eab9190612c28565b600860009054906101000a90046dffffffffffffffffffffffffffff166008600e9054906101000a90046dffffffffffffffffffffffffffff16612049565b6001600c81905550565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401611f2992919061303b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f939190612fd2565b6000604051808303816000865af19150503d8060008114611fd0576040519150601f19603f3d011682016040523d82523d6000602084013e611fd5565b606091505b509150915081801561200357506000815114806120025750808060200190518101906120019190612bff565b5b5b612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203990613330565b60405180910390fd5b5050505050565b6dffffffffffffffffffffffffffff8016841115801561207957506dffffffffffffffffffffffffffff80168311155b6120b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120af90613310565b60405180910390fd5b6000640100000000426120cb9190613784565b905060006008601c9054906101000a900463ffffffff168203905060008163ffffffff1611801561210d57506000846dffffffffffffffffffffffffffff1614155b801561212a57506000836dffffffffffffffffffffffffffff1614155b1561220c578063ffffffff1661216f8561214386612911565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661294590919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16026009600082825401925050819055508063ffffffff166121dd846121b187612911565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661294590919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602600a600082825401925050819055505b5084600860006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550836008600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550806008601c6101000a81548163ffffffff021916908363ffffffff1602179055507f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1600860009054906101000a90046dffffffffffffffffffffffffffff166008600e9054906101000a90046dffffffffffffffffffffffffffff16604051612301929190613350565b60405180910390a15050505050565b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516123ee91906133b0565b60405180910390a3505050565b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461244a919061360a565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124a091906134a2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161250491906133b0565b60405180910390a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561257c57600080fd5b505afa158015612590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b49190612a71565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141591506000600b54905082156126b457600081146126af576000612634856dffffffffffffffffffffffffffff16876dffffffffffffffffffffffffffff1661262f91906135b0565b6126ce565b90506000612641836126ce565b9050808211156126ac5760008183612659919061360a565b60005461266691906135b0565b905060008260058561267891906135b0565b61268291906134a2565b9050600081836126929190613529565b905060008111156126a8576126a78782612748565b5b5050505b50505b6126c6565b600081146126c5576000600b819055505b5b505092915050565b6000600382111561273557819050600060016002846126ed9190613529565b6126f791906134a2565b90505b8181101561272f5780915060028182856127149190613529565b61271e91906134a2565b6127289190613529565b90506126fa565b50612743565b6000821461274257600190505b5b919050565b8060008082825461275991906134a2565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127af91906134a2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161281491906133b0565b60405180910390a35050565b600081831061282f5781612831565b825b905092915050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612888919061360a565b92505081905550806000808282546128a0919061360a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161290591906133b0565b60405180910390a35050565b60006e010000000000000000000000000000826dffffffffffffffffffffffffffff1661293e919061355a565b9050919050565b6000816dffffffffffffffffffffffffffff168361296391906134f8565b905092915050565b60008135905061297a81613b20565b92915050565b60008151905061298f81613b20565b92915050565b6000815190506129a481613b37565b92915050565b6000813590506129b981613b4e565b92915050565b60008083601f8401126129d157600080fd5b8235905067ffffffffffffffff8111156129ea57600080fd5b602083019150836001820283011115612a0257600080fd5b9250929050565b600081359050612a1881613b65565b92915050565b600081519050612a2d81613b65565b92915050565b600081359050612a4281613b7c565b92915050565b600060208284031215612a5a57600080fd5b6000612a688482850161296b565b91505092915050565b600060208284031215612a8357600080fd5b6000612a9184828501612980565b91505092915050565b60008060408385031215612aad57600080fd5b6000612abb8582860161296b565b9250506020612acc8582860161296b565b9150509250929050565b600080600060608486031215612aeb57600080fd5b6000612af98682870161296b565b9350506020612b0a8682870161296b565b9250506040612b1b86828701612a09565b9150509250925092565b600080600080600080600060e0888a031215612b4057600080fd5b6000612b4e8a828b0161296b565b9750506020612b5f8a828b0161296b565b9650506040612b708a828b01612a09565b9550506060612b818a828b01612a09565b9450506080612b928a828b01612a33565b93505060a0612ba38a828b016129aa565b92505060c0612bb48a828b016129aa565b91505092959891949750929550565b60008060408385031215612bd657600080fd5b6000612be48582860161296b565b9250506020612bf585828601612a09565b9150509250929050565b600060208284031215612c1157600080fd5b6000612c1f84828501612995565b91505092915050565b600060208284031215612c3a57600080fd5b6000612c4884828501612a1e565b91505092915050565b600080600080600060808688031215612c6957600080fd5b6000612c7788828901612a09565b9550506020612c8888828901612a09565b9450506040612c998882890161296b565b935050606086013567ffffffffffffffff811115612cb657600080fd5b612cc2888289016129bf565b92509250509295509295909350565b612cda8161363e565b82525050565b612ce981613650565b82525050565b612cf88161365c565b82525050565b612d0f612d0a8261365c565b61377a565b82525050565b6000612d21838561346a565b9350612d2e8385846136ef565b612d3783613813565b840190509392505050565b6000612d4d82613454565b612d57818561347b565b9350612d678185602086016136fe565b80840191505092915050565b6000612d7e8261345f565b612d888185613486565b9350612d988185602086016136fe565b612da181613813565b840191505092915050565b6000612db9602583613486565b9150612dc482613824565b604082019050919050565b6000612ddc602483613486565b9150612de782613873565b604082019050919050565b6000612dff601583613486565b9150612e0a826138c2565b602082019050919050565b6000612e22601c83613486565b9150612e2d826138eb565b602082019050919050565b6000612e45600283613497565b9150612e5082613914565b600282019050919050565b6000612e68602183613486565b9150612e738261393d565b604082019050919050565b6000612e8b601283613486565b9150612e968261398c565b602082019050919050565b6000612eae601183613486565b9150612eb9826139b5565b602082019050919050565b6000612ed1600c83613486565b9150612edc826139de565b602082019050919050565b6000612ef4602883613486565b9150612eff82613a07565b604082019050919050565b6000612f17602883613486565b9150612f2282613a56565b604082019050919050565b6000612f3a601483613486565b9150612f4582613aa5565b602082019050919050565b6000612f5d601383613486565b9150612f6882613ace565b602082019050919050565b6000612f80601a83613486565b9150612f8b82613af7565b602082019050919050565b612f9f81613666565b82525050565b612fae816136c8565b82525050565b612fbd816136d2565b82525050565b612fcc816136e2565b82525050565b6000612fde8284612d42565b915081905092915050565b6000612ff482612e38565b91506130008285612cfe565b6020820191506130108284612cfe565b6020820191508190509392505050565b60006020820190506130356000830184612cd1565b92915050565b60006040820190506130506000830185612cd1565b61305d6020830184612fa5565b9392505050565b60006080820190506130796000830188612cd1565b6130866020830187612fa5565b6130936040830186612fa5565b81810360608301526130a6818486612d15565b90509695505050505050565b60006020820190506130c76000830184612ce0565b92915050565b60006020820190506130e26000830184612cef565b92915050565b600060c0820190506130fd6000830189612cef565b61310a6020830188612cd1565b6131176040830187612cd1565b6131246060830186612fa5565b6131316080830185612fa5565b61313e60a0830184612fa5565b979650505050505050565b600060808201905061315e6000830187612cef565b61316b6020830186612fc3565b6131786040830185612cef565b6131856060830184612cef565b95945050505050565b600060208201905081810360008301526131a88184612d73565b905092915050565b600060208201905081810360008301526131c981612dac565b9050919050565b600060208201905081810360008301526131e981612dcf565b9050919050565b6000602082019050818103600083015261320981612df2565b9050919050565b6000602082019050818103600083015261322981612e15565b9050919050565b6000602082019050818103600083015261324981612e5b565b9050919050565b6000602082019050818103600083015261326981612e7e565b9050919050565b6000602082019050818103600083015261328981612ea1565b9050919050565b600060208201905081810360008301526132a981612ec4565b9050919050565b600060208201905081810360008301526132c981612ee7565b9050919050565b600060208201905081810360008301526132e981612f0a565b9050919050565b6000602082019050818103600083015261330981612f2d565b9050919050565b6000602082019050818103600083015261332981612f50565b9050919050565b6000602082019050818103600083015261334981612f73565b9050919050565b60006040820190506133656000830185612f96565b6133726020830184612f96565b9392505050565b600060608201905061338e6000830186612f96565b61339b6020830185612f96565b6133a86040830184612fb4565b949350505050565b60006020820190506133c56000830184612fa5565b92915050565b60006040820190506133e06000830185612fa5565b6133ed6020830184612fa5565b9392505050565b60006080820190506134096000830187612fa5565b6134166020830186612fa5565b6134236040830185612fa5565b6134306060830184612fa5565b95945050505050565b600060208201905061344e6000830184612fc3565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006134ad826136c8565b91506134b8836136c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134ed576134ec6137b5565b5b828201905092915050565b6000613503826136a0565b915061350e836136a0565b92508261351e5761351d6137e4565b5b828204905092915050565b6000613534826136c8565b915061353f836136c8565b92508261354f5761354e6137e4565b5b828204905092915050565b6000613565826136a0565b9150613570836136a0565b9250817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135a5576135a46137b5565b5b828202905092915050565b60006135bb826136c8565b91506135c6836136c8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135ff576135fe6137b5565b5b828202905092915050565b6000613615826136c8565b9150613620836136c8565b925082821015613633576136326137b5565b5b828203905092915050565b600061364982613680565b9050919050565b60008115159050919050565b6000819050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561371c578082015181840152602081019050613701565b8381111561372b576000848401525b50505050565b600061373c826136c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561376f5761376e6137b5565b5b600182019050919050565b6000819050919050565b600061378f826136c8565b915061379a836136c8565b9250826137aa576137a96137e4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f556e697377617056323a20494e53554646494349454e545f4f55545055545f4160008201527f4d4f554e54000000000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60008201527f4f554e5400000000000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20494e56414c49445f544f0000000000000000000000600082015250565b7f556e697377617056323a20494e56414c49445f5349474e415455524500000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f5900000000000000000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20455850495245440000000000000000000000000000600082015250565b7f556e697377617056323a204c4f434b4544000000000000000000000000000000600082015250565b7f556e697377617056323a204b0000000000000000000000000000000000000000600082015250565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f595f4255524e4544000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f595f4d494e544544000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20464f5242494444454e000000000000000000000000600082015250565b7f556e697377617056323a204f564552464c4f5700000000000000000000000000600082015250565b7f556e697377617056323a205452414e534645525f4641494c4544000000000000600082015250565b613b298161363e565b8114613b3457600080fd5b50565b613b4081613650565b8114613b4b57600080fd5b50565b613b578161365c565b8114613b6257600080fd5b50565b613b6e816136c8565b8114613b7957600080fd5b50565b613b85816136e2565b8114613b9057600080fd5b5056fea26469706673582212203b182d5329acb9218e42c75aa34fdd50ba0b40585a237392e46e8c09d5dfdd1764736f6c63430008040033a2646970667358221220b5e4b2917a7b911ea787c673d724f09d67fdfc5bd399df1e6988eb893c35f57f64736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000a05760003560e01c806364f91c72116200006f57806364f91c721462000141578063a2e74af61462000163578063c9c653961462000183578063e6a4390514620001b9578063f46901ed14620001ef57620000a0565b8063017e7e5814620000a5578063094b741514620000c75780631e3dd18b14620000e9578063574f2ba3146200011f575b600080fd5b620000af6200020f565b604051620000be919062000c0c565b60405180910390f35b620000d162000233565b604051620000e0919062000c0c565b60405180910390f35b62000107600480360381019062000101919062000ac6565b62000259565b60405162000116919062000c0c565b60405180910390f35b6200012962000299565b60405162000138919062000d28565b60405180910390f35b6200014b620002a6565b6040516200015a919062000c83565b60405180910390f35b6200018160048036038101906200017b919062000a59565b620002d6565b005b620001a160048036038101906200019b919062000a85565b620003ad565b604051620001b0919062000c0c565b60405180910390f35b620001d76004803603810190620001d1919062000a85565b62000905565b604051620001e6919062000c0c565b60405180910390f35b6200020d600480360381019062000207919062000a59565b62000947565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381815481106200026a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600380549050905090565b60405180602001620002b89062000a1d565b6020820181038252601f19601f820116604052508051906020012081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003609062000cc2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000421576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004189062000ca0565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106200046057838562000463565b84845b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004d19062000d06565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620005e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005df9062000ce4565b60405180910390fd5b8181604051602001620005fd92919062000bdc565b60405160208183030381529060405280519060200120604051620006219062000a1d565b8190604051809103906000f590508015801562000642573d6000803e3d6000fd5b5092508273ffffffffffffffffffffffffffffffffffffffff1663485cc95583836040518363ffffffff1660e01b81526004016200068292919062000c29565b600060405180830381600087803b1580156200069d57600080fd5b505af1158015620006b2573d6000803e3d6000fd5b5050505082600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e985600380549050604051620008f592919062000c56565b60405180910390a3505092915050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009d19062000cc2565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613dde8062000eac83390190565b60008135905062000a3c8162000e77565b92915050565b60008135905062000a538162000e91565b92915050565b60006020828403121562000a6c57600080fd5b600062000a7c8482850162000a2b565b91505092915050565b6000806040838503121562000a9957600080fd5b600062000aa98582860162000a2b565b925050602062000abc8582860162000a2b565b9150509250929050565b60006020828403121562000ad957600080fd5b600062000ae98482850162000a42565b91505092915050565b62000afd8162000d56565b82525050565b62000b1862000b128262000d56565b62000d9e565b82525050565b62000b298162000d6a565b82525050565b600062000b3e601e8362000d45565b915062000b4b8262000dd3565b602082019050919050565b600062000b6560148362000d45565b915062000b728262000dfc565b602082019050919050565b600062000b8c60168362000d45565b915062000b998262000e25565b602082019050919050565b600062000bb360178362000d45565b915062000bc08262000e4e565b602082019050919050565b62000bd68162000d94565b82525050565b600062000bea828562000b03565b60148201915062000bfc828462000b03565b6014820191508190509392505050565b600060208201905062000c23600083018462000af2565b92915050565b600060408201905062000c40600083018562000af2565b62000c4f602083018462000af2565b9392505050565b600060408201905062000c6d600083018562000af2565b62000c7c602083018462000bcb565b9392505050565b600060208201905062000c9a600083018462000b1e565b92915050565b6000602082019050818103600083015262000cbb8162000b2f565b9050919050565b6000602082019050818103600083015262000cdd8162000b56565b9050919050565b6000602082019050818103600083015262000cff8162000b7d565b9050919050565b6000602082019050818103600083015262000d218162000ba4565b9050919050565b600060208201905062000d3f600083018462000bcb565b92915050565b600082825260208201905092915050565b600062000d638262000d74565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000dab8262000db2565b9050919050565b600062000dbf8262000dc6565b9050919050565b60008160601b9050919050565b7f556e697377617056323a204944454e544943414c5f4144445245535345530000600082015250565b7f556e697377617056323a20464f5242494444454e000000000000000000000000600082015250565b7f556e697377617056323a20504149525f45584953545300000000000000000000600082015250565b7f556e697377617056323a205a45524f5f41444452455353000000000000000000600082015250565b62000e828162000d56565b811462000e8e57600080fd5b50565b62000e9c8162000d94565b811462000ea857600080fd5b5056fe60806040526001600c553480156200001657600080fd5b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600a81526020017f556e697377617020563200000000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001204630604051602001620000ca95949392919062000160565b6040516020818303038152906040528051906020012060038190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000205565b6200013881620001bd565b82525050565b6200014981620001d1565b82525050565b6200015a81620001fb565b82525050565b600060a0820190506200017760008301886200013e565b6200018660208301876200013e565b6200019560408301866200013e565b620001a460608301856200014f565b620001b360808301846200012d565b9695505050505050565b6000620001ca82620001db565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b613bc980620002156000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146104db578063d505accf146104f9578063dd62ed3e14610515578063fff6cae914610545576101a9565b8063ba9a7a5614610483578063bc25cf77146104a1578063c45a0155146104bd576101a9565b80637ecebe00116100d35780637ecebe00146103d457806389afcb441461040457806395d89b4114610435578063a9059cbb14610453576101a9565b80636a6278421461035657806370a08231146103865780637464fc3d146103b6576101a9565b806323b872dd116101665780633644e515116101405780633644e515146102e0578063485cc955146102fe5780635909c0d51461031a5780635a3d549314610338576101a9565b806323b872dd1461027457806330adf81f146102a4578063313ce567146102c2576101a9565b8063022c0d9f146101ae57806306fdde03146101ca5780630902f1ac146101e8578063095ea7b3146102085780630dfe16811461023857806318160ddd14610256575b600080fd5b6101c860048036038101906101c39190612c51565b61054f565b005b6101d2610b80565b6040516101df919061318e565b60405180910390f35b6101f0610bb9565b6040516101ff93929190613379565b60405180910390f35b610222600480360381019061021d9190612bc3565b610c16565b60405161022f91906130b2565b60405180910390f35b610240610c2d565b60405161024d9190613020565b60405180910390f35b61025e610c53565b60405161026b91906133b0565b60405180910390f35b61028e60048036038101906102899190612ad6565b610c59565b60405161029b91906130b2565b60405180910390f35b6102ac610da8565b6040516102b991906130cd565b60405180910390f35b6102ca610dcf565b6040516102d79190613439565b60405180910390f35b6102e8610dd4565b6040516102f591906130cd565b60405180910390f35b61031860048036038101906103139190612a9a565b610dda565b005b610322610ef0565b60405161032f91906133b0565b60405180910390f35b610340610ef6565b60405161034d91906133b0565b60405180910390f35b610370600480360381019061036b9190612a48565b610efc565b60405161037d91906133b0565b60405180910390f35b6103a0600480360381019061039b9190612a48565b6112d3565b6040516103ad91906133b0565b60405180910390f35b6103be6112eb565b6040516103cb91906133b0565b60405180910390f35b6103ee60048036038101906103e99190612a48565b6112f1565b6040516103fb91906133b0565b60405180910390f35b61041e60048036038101906104199190612a48565b611309565b60405161042c9291906133cb565b60405180910390f35b61043d6117da565b60405161044a919061318e565b60405180910390f35b61046d60048036038101906104689190612bc3565b611813565b60405161047a91906130b2565b60405180910390f35b61048b61182a565b60405161049891906133b0565b60405180910390f35b6104bb60048036038101906104b69190612a48565b611830565b005b6104c5611a6c565b6040516104d29190613020565b60405180910390f35b6104e3611a92565b6040516104f09190613020565b60405180910390f35b610513600480360381019061050e9190612b25565b611ab8565b005b61052f600480360381019061052a9190612a9a565b611ce0565b60405161053c91906133b0565b60405180910390f35b61054d611d05565b005b6001600c5414610594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058b90613270565b60405180910390fd5b6000600c8190555060008511806105ab5750600084115b6105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906131b0565b60405180910390fd5b6000806105f5610bb9565b5091509150816dffffffffffffffffffffffffffff16871080156106285750806dffffffffffffffffffffffffffff1686105b610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90613230565b60405180910390fd5b6000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415801561072057508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b61075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906131f0565b60405180910390fd5b60008b111561077457610773828a8d611ef4565b5b60008a111561078957610788818a8c611ef4565b5b6000888890501115610809578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b81526004016107d6959493929190613064565b600060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108429190613020565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612c28565b93508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108cd9190613020565b60206040518083038186803b1580156108e557600080fd5b505afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190612c28565b92505050600089856dffffffffffffffffffffffffffff1661093f919061360a565b831161094c576000610974565b89856dffffffffffffffffffffffffffff16610968919061360a565b83610973919061360a565b5b9050600089856dffffffffffffffffffffffffffff16610994919061360a565b83116109a15760006109c9565b89856dffffffffffffffffffffffffffff166109bd919061360a565b836109c8919061360a565b5b905060008211806109da5750600081115b610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a10906131d0565b60405180910390fd5b6000600383610a2891906135b0565b6103e886610a3691906135b0565b610a40919061360a565b90506000600383610a5191906135b0565b6103e886610a5f91906135b0565b610a69919061360a565b9050620f4240876dffffffffffffffffffffffffffff16896dffffffffffffffffffffffffffff16610a9b91906135b0565b610aa591906135b0565b8183610ab191906135b0565b1015610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae990613290565b60405180910390fd5b5050610b0084848888612049565b8873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848f8f604051610b6394939291906133f4565b60405180910390a35050505050506001600c819055505050505050565b6040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b6000806000600860009054906101000a90046dffffffffffffffffffffffffffff1692506008600e9054906101000a90046dffffffffffffffffffffffffffff1691506008601c9054906101000a900463ffffffff169050909192565b6000610c23338484612310565b6001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610d925781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8a919061360a565b925050819055505b610d9d8484846123fb565b600190509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e61906132f0565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60095481565b600a5481565b60006001600c5414610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90613270565b60405180910390fd5b6000600c81905550600080610f56610bb9565b50915091506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fb89190613020565b60206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190612c28565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110679190613020565b60206040518083038186803b15801561107f57600080fd5b505afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b79190612c28565b90506000846dffffffffffffffffffffffffffff16836110d7919061360a565b90506000846dffffffffffffffffffffffffffff16836110f7919061360a565b905060006111058787612511565b9050600080549050600081141561114b576103e861112d848661112891906135b0565b6126ce565b611137919061360a565b985061114660006103e8612748565b6111a4565b6111a1886dffffffffffffffffffffffffffff16828661116b91906135b0565b6111759190613529565b886dffffffffffffffffffffffffffff16838661119291906135b0565b61119c9190613529565b612820565b98505b600089116111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de906132d0565b60405180910390fd5b6111f18a8a612748565b6111fd86868a8a612049565b811561126e576008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1661126791906135b0565b600b819055505b3373ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f85856040516112b69291906133cb565b60405180910390a250505050505050506001600c81905550919050565b60016020528060005260406000206000915090505481565b600b5481565b60046020528060005260406000206000915090505481565b6000806001600c5414611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890613270565b60405180910390fd5b6000600c81905550600080611364610bb9565b50915091506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113f29190613020565b60206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190612c28565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161147f9190613020565b60206040518083038186803b15801561149757600080fd5b505afa1580156114ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cf9190612c28565b90506000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006115218888612511565b905060008054905080858461153691906135b0565b6115409190613529565b9a5080848461154f91906135b0565b6115599190613529565b995060008b11801561156b575060008a115b6115aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a1906132b0565b60405180910390fd5b6115b43084612839565b6115bf878d8d611ef4565b6115ca868d8c611ef4565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116039190613020565b60206040518083038186803b15801561161b57600080fd5b505afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116539190612c28565b94508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161168e9190613020565b60206040518083038186803b1580156116a657600080fd5b505afa1580156116ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116de9190612c28565b93506116ec85858b8b612049565b811561175d576008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1661175691906135b0565b600b819055505b8b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d6040516117bc9291906133cb565b60405180910390a35050505050505050506001600c81905550915091565b6040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b60006118203384846123fb565b6001905092915050565b6103e881565b6001600c5414611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c90613270565b60405180910390fd5b6000600c819055506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506119958284600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119369190613020565b60206040518083038186803b15801561194e57600080fd5b505afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119869190612c28565b611990919061360a565b611ef4565b611a5f81846008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a009190613020565b60206040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190612c28565b611a5a919061360a565b611ef4565b50506001600c8190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b42841015611afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af290613250565b60405180910390fd5b60006003547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b898989600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611b7790613731565b919050558a604051602001611b91969594939291906130e8565b60405160208183030381529060405280519060200120604051602001611bb8929190612fe9565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051611bf59493929190613149565b6020604051602081039080840390855afa158015611c17573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611c8b57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190613210565b60405180910390fd5b611cd5898989612310565b505050505050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b6001600c5414611d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4190613270565b60405180910390fd5b6000600c81905550611eea600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611db09190613020565b60206040518083038186803b158015611dc857600080fd5b505afa158015611ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e009190612c28565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e5b9190613020565b60206040518083038186803b158015611e7357600080fd5b505afa158015611e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eab9190612c28565b600860009054906101000a90046dffffffffffffffffffffffffffff166008600e9054906101000a90046dffffffffffffffffffffffffffff16612049565b6001600c81905550565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401611f2992919061303b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f939190612fd2565b6000604051808303816000865af19150503d8060008114611fd0576040519150601f19603f3d011682016040523d82523d6000602084013e611fd5565b606091505b509150915081801561200357506000815114806120025750808060200190518101906120019190612bff565b5b5b612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203990613330565b60405180910390fd5b5050505050565b6dffffffffffffffffffffffffffff8016841115801561207957506dffffffffffffffffffffffffffff80168311155b6120b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120af90613310565b60405180910390fd5b6000640100000000426120cb9190613784565b905060006008601c9054906101000a900463ffffffff168203905060008163ffffffff1611801561210d57506000846dffffffffffffffffffffffffffff1614155b801561212a57506000836dffffffffffffffffffffffffffff1614155b1561220c578063ffffffff1661216f8561214386612911565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661294590919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16026009600082825401925050819055508063ffffffff166121dd846121b187612911565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661294590919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602600a600082825401925050819055505b5084600860006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550836008600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550806008601c6101000a81548163ffffffff021916908363ffffffff1602179055507f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1600860009054906101000a90046dffffffffffffffffffffffffffff166008600e9054906101000a90046dffffffffffffffffffffffffffff16604051612301929190613350565b60405180910390a15050505050565b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516123ee91906133b0565b60405180910390a3505050565b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461244a919061360a565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124a091906134a2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161250491906133b0565b60405180910390a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561257c57600080fd5b505afa158015612590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b49190612a71565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141591506000600b54905082156126b457600081146126af576000612634856dffffffffffffffffffffffffffff16876dffffffffffffffffffffffffffff1661262f91906135b0565b6126ce565b90506000612641836126ce565b9050808211156126ac5760008183612659919061360a565b60005461266691906135b0565b905060008260058561267891906135b0565b61268291906134a2565b9050600081836126929190613529565b905060008111156126a8576126a78782612748565b5b5050505b50505b6126c6565b600081146126c5576000600b819055505b5b505092915050565b6000600382111561273557819050600060016002846126ed9190613529565b6126f791906134a2565b90505b8181101561272f5780915060028182856127149190613529565b61271e91906134a2565b6127289190613529565b90506126fa565b50612743565b6000821461274257600190505b5b919050565b8060008082825461275991906134a2565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127af91906134a2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161281491906133b0565b60405180910390a35050565b600081831061282f5781612831565b825b905092915050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612888919061360a565b92505081905550806000808282546128a0919061360a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161290591906133b0565b60405180910390a35050565b60006e010000000000000000000000000000826dffffffffffffffffffffffffffff1661293e919061355a565b9050919050565b6000816dffffffffffffffffffffffffffff168361296391906134f8565b905092915050565b60008135905061297a81613b20565b92915050565b60008151905061298f81613b20565b92915050565b6000815190506129a481613b37565b92915050565b6000813590506129b981613b4e565b92915050565b60008083601f8401126129d157600080fd5b8235905067ffffffffffffffff8111156129ea57600080fd5b602083019150836001820283011115612a0257600080fd5b9250929050565b600081359050612a1881613b65565b92915050565b600081519050612a2d81613b65565b92915050565b600081359050612a4281613b7c565b92915050565b600060208284031215612a5a57600080fd5b6000612a688482850161296b565b91505092915050565b600060208284031215612a8357600080fd5b6000612a9184828501612980565b91505092915050565b60008060408385031215612aad57600080fd5b6000612abb8582860161296b565b9250506020612acc8582860161296b565b9150509250929050565b600080600060608486031215612aeb57600080fd5b6000612af98682870161296b565b9350506020612b0a8682870161296b565b9250506040612b1b86828701612a09565b9150509250925092565b600080600080600080600060e0888a031215612b4057600080fd5b6000612b4e8a828b0161296b565b9750506020612b5f8a828b0161296b565b9650506040612b708a828b01612a09565b9550506060612b818a828b01612a09565b9450506080612b928a828b01612a33565b93505060a0612ba38a828b016129aa565b92505060c0612bb48a828b016129aa565b91505092959891949750929550565b60008060408385031215612bd657600080fd5b6000612be48582860161296b565b9250506020612bf585828601612a09565b9150509250929050565b600060208284031215612c1157600080fd5b6000612c1f84828501612995565b91505092915050565b600060208284031215612c3a57600080fd5b6000612c4884828501612a1e565b91505092915050565b600080600080600060808688031215612c6957600080fd5b6000612c7788828901612a09565b9550506020612c8888828901612a09565b9450506040612c998882890161296b565b935050606086013567ffffffffffffffff811115612cb657600080fd5b612cc2888289016129bf565b92509250509295509295909350565b612cda8161363e565b82525050565b612ce981613650565b82525050565b612cf88161365c565b82525050565b612d0f612d0a8261365c565b61377a565b82525050565b6000612d21838561346a565b9350612d2e8385846136ef565b612d3783613813565b840190509392505050565b6000612d4d82613454565b612d57818561347b565b9350612d678185602086016136fe565b80840191505092915050565b6000612d7e8261345f565b612d888185613486565b9350612d988185602086016136fe565b612da181613813565b840191505092915050565b6000612db9602583613486565b9150612dc482613824565b604082019050919050565b6000612ddc602483613486565b9150612de782613873565b604082019050919050565b6000612dff601583613486565b9150612e0a826138c2565b602082019050919050565b6000612e22601c83613486565b9150612e2d826138eb565b602082019050919050565b6000612e45600283613497565b9150612e5082613914565b600282019050919050565b6000612e68602183613486565b9150612e738261393d565b604082019050919050565b6000612e8b601283613486565b9150612e968261398c565b602082019050919050565b6000612eae601183613486565b9150612eb9826139b5565b602082019050919050565b6000612ed1600c83613486565b9150612edc826139de565b602082019050919050565b6000612ef4602883613486565b9150612eff82613a07565b604082019050919050565b6000612f17602883613486565b9150612f2282613a56565b604082019050919050565b6000612f3a601483613486565b9150612f4582613aa5565b602082019050919050565b6000612f5d601383613486565b9150612f6882613ace565b602082019050919050565b6000612f80601a83613486565b9150612f8b82613af7565b602082019050919050565b612f9f81613666565b82525050565b612fae816136c8565b82525050565b612fbd816136d2565b82525050565b612fcc816136e2565b82525050565b6000612fde8284612d42565b915081905092915050565b6000612ff482612e38565b91506130008285612cfe565b6020820191506130108284612cfe565b6020820191508190509392505050565b60006020820190506130356000830184612cd1565b92915050565b60006040820190506130506000830185612cd1565b61305d6020830184612fa5565b9392505050565b60006080820190506130796000830188612cd1565b6130866020830187612fa5565b6130936040830186612fa5565b81810360608301526130a6818486612d15565b90509695505050505050565b60006020820190506130c76000830184612ce0565b92915050565b60006020820190506130e26000830184612cef565b92915050565b600060c0820190506130fd6000830189612cef565b61310a6020830188612cd1565b6131176040830187612cd1565b6131246060830186612fa5565b6131316080830185612fa5565b61313e60a0830184612fa5565b979650505050505050565b600060808201905061315e6000830187612cef565b61316b6020830186612fc3565b6131786040830185612cef565b6131856060830184612cef565b95945050505050565b600060208201905081810360008301526131a88184612d73565b905092915050565b600060208201905081810360008301526131c981612dac565b9050919050565b600060208201905081810360008301526131e981612dcf565b9050919050565b6000602082019050818103600083015261320981612df2565b9050919050565b6000602082019050818103600083015261322981612e15565b9050919050565b6000602082019050818103600083015261324981612e5b565b9050919050565b6000602082019050818103600083015261326981612e7e565b9050919050565b6000602082019050818103600083015261328981612ea1565b9050919050565b600060208201905081810360008301526132a981612ec4565b9050919050565b600060208201905081810360008301526132c981612ee7565b9050919050565b600060208201905081810360008301526132e981612f0a565b9050919050565b6000602082019050818103600083015261330981612f2d565b9050919050565b6000602082019050818103600083015261332981612f50565b9050919050565b6000602082019050818103600083015261334981612f73565b9050919050565b60006040820190506133656000830185612f96565b6133726020830184612f96565b9392505050565b600060608201905061338e6000830186612f96565b61339b6020830185612f96565b6133a86040830184612fb4565b949350505050565b60006020820190506133c56000830184612fa5565b92915050565b60006040820190506133e06000830185612fa5565b6133ed6020830184612fa5565b9392505050565b60006080820190506134096000830187612fa5565b6134166020830186612fa5565b6134236040830185612fa5565b6134306060830184612fa5565b95945050505050565b600060208201905061344e6000830184612fc3565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006134ad826136c8565b91506134b8836136c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134ed576134ec6137b5565b5b828201905092915050565b6000613503826136a0565b915061350e836136a0565b92508261351e5761351d6137e4565b5b828204905092915050565b6000613534826136c8565b915061353f836136c8565b92508261354f5761354e6137e4565b5b828204905092915050565b6000613565826136a0565b9150613570836136a0565b9250817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135a5576135a46137b5565b5b828202905092915050565b60006135bb826136c8565b91506135c6836136c8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135ff576135fe6137b5565b5b828202905092915050565b6000613615826136c8565b9150613620836136c8565b925082821015613633576136326137b5565b5b828203905092915050565b600061364982613680565b9050919050565b60008115159050919050565b6000819050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561371c578082015181840152602081019050613701565b8381111561372b576000848401525b50505050565b600061373c826136c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561376f5761376e6137b5565b5b600182019050919050565b6000819050919050565b600061378f826136c8565b915061379a836136c8565b9250826137aa576137a96137e4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f556e697377617056323a20494e53554646494349454e545f4f55545055545f4160008201527f4d4f554e54000000000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60008201527f4f554e5400000000000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20494e56414c49445f544f0000000000000000000000600082015250565b7f556e697377617056323a20494e56414c49445f5349474e415455524500000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f5900000000000000000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20455850495245440000000000000000000000000000600082015250565b7f556e697377617056323a204c4f434b4544000000000000000000000000000000600082015250565b7f556e697377617056323a204b0000000000000000000000000000000000000000600082015250565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f595f4255524e4544000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f595f4d494e544544000000000000000000000000000000000000000000000000602082015250565b7f556e697377617056323a20464f5242494444454e000000000000000000000000600082015250565b7f556e697377617056323a204f564552464c4f5700000000000000000000000000600082015250565b7f556e697377617056323a205452414e534645525f4641494c4544000000000000600082015250565b613b298161363e565b8114613b3457600080fd5b50565b613b4081613650565b8114613b4b57600080fd5b50565b613b578161365c565b8114613b6257600080fd5b50565b613b6e816136c8565b8114613b7957600080fd5b50565b613b85816136e2565b8114613b9057600080fd5b5056fea26469706673582212203b182d5329acb9218e42c75aa34fdd50ba0b40585a237392e46e8c09d5dfdd1764736f6c63430008040033a2646970667358221220b5e4b2917a7b911ea787c673d724f09d67fdfc5bd399df1e6988eb893c35f57f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 364,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 367,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 374,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 378,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}